@using System.Threading.Tasks
@using Humanizer
@model UploadModel
@inject Microsoft.Extensions.Options.IOptions<IFS.Web.Core.Upload.FileStoreOptions> FileStoreOptions

@{
    ViewBag.Title = "Upload selector";
}

<div id="upload-root">
    <ifs-page-title>@ViewBag.Title</ifs-page-title>

    @if (Model.IsReservation == false) {
        <p>
            Need to share a file over the internet? Upload it here. You will receive a unique url that you can send via e-mail or instant messaging to anyone who needs to download the file.
        </p>
    } else {
        <p>
            Please upload the file you want to share here. After the upload your will receive a hyperlink your can share.
        </p>

        if (Model.Sender != null) {
             string name = String.IsNullOrEmpty(Model.Sender.Name) ? Model.Sender.EmailAddress : Model.Sender.Name;
             bool nameOnly = !String.IsNullOrEmpty(Model.Sender.EmailAddress);

             <p>
                 This file upload has been request by
                 @if (nameOnly) {
                     @name
                 } else {
                     <a href="mailto:@Model.Sender.EmailAddress">@name</a>
                 } and after the upload the file will be available to him/her.
             </p>
         }
    }

    <div class="alert alert-info">
        <strong>Maximum file size: </strong> @FileStoreOptions.Value.MaximumFileSize.Megabytes().ToString("MB")
    </div>

    <form asp-route="AsyncUploadHandler"
          asp-route-fileidentifier="@Model.FileIdentifier"
          asp-antiforgery="false"
          target="uploadFrame"
          enctype="multipart/form-data" method="post">
        <input asp-for="FileIdentifier" type="hidden" />
        <input asp-for="SuggestedFileSize" type="hidden" />
        <input asp-for="IsReservation" type="hidden" />

        <p>
            <label asp-for="File" class="control-label"></label>

            <div class="upload-control form-control btn btn-primary">
                <span>Select file</span>

                <input type="file" asp-for="File" />
            </div>
            
            <span asp-validation-for="File" class="text-danger">*</span>
        </p>

        @{
            Html.RenderPartial(Model.IsReservation == false ? "_UploadForm.Full" : "_UploadForm.Reservation", Model);
        }

        <p>
            <button class="btn btn-primary">
                <span class="glyphicon glyphicon-upload"></span> Upload
            </button>
        </p>
    </form>
</div>

<iframe name="uploadFrame" id="uploadFrame" style="display:none"></iframe>

<div class="hidden" id="upload-done">
    <div class="alert alert-info">
        <strong>Done!</strong> Redirecting you to the results...
    </div>
</div>

<div class="hidden" id="upload-error">
    <h2>Upload failed</h2>

    <div class="alert alert-danger">
        <strong>Oops...</strong> It appears something has gone terribly wrong with the upload
    </div>

    <p>
        Please check whether the file you're trying to upload isn't too large.
    </p>

    <p>
        <button class="btn btn-primary reload-button" type="button">Try again</button>
    </p>
</div>

@section scripts {
    <environment names="Development">
        <script src="~/lib/jquery-validation/dist/jquery.validate.js"></script>
        <script src="~/lib/jquery-validation-unobtrusive/jquery.validate.unobtrusive.js"></script>
        <script src="~/js/site.js"></script>
    </environment>
    <environment names="Staging,Production">
        <script src="~/lib/jquery-validation/dist/jquery.validate.min.js"></script>
        <script src="~/lib/jquery-validation-unobtrusive/jquery.validate.unobtrusive.min.js"></script>
        <script src="~/js/site.min.js"></script>
    </environment>

    <script>
        (function (global) {
            var $uploadRoot = $('#upload-root'),
                errorIntervalTimerHandle = 0,
                trackerUrl = '@Url.RouteUrl("UploadTracker", new { trackerId = Model.FileIdentifier })';

            $uploadRoot.find('form').submit(function () {
                if (!$(this).valid()) {
                    return;
                }

                $uploadRoot.load(trackerUrl);

                // If the iframe loads, and we weren't called back within a certain time,
                // we can assume there is some kind of server error.
                $('#uploadFrame').on('load', function () {
                    console.info('Upload frame has loaded...');

                    errorIntervalTimerHandle = window.setTimeout(global.uploadCoordinator.assumeServerUploadError, 2000);
                });
            });

            $(document).on('load', '.reload-button', function(ev) {
                ev.preventDefault();

                document.location.reload(true);
            });

            $('.upload-control input[type=file]').change(function() {
                $(this).parent().next('[data-valmsg-for]')
                       .removeClass('text-danger')
                       .text('')
                       .addClass('text-success')
                       .addClass('glyphicon')
                       .addClass('glyphicon-ok');

                var fileInput = this;
                var files = fileInput.files;
                var firstFile = (files || [])[0];

                if (firstFile && firstFile.size) {
                    $('input[name="@Html.NameFor(x => x.SuggestedFileSize)"]').val(firstFile.size);
                }
            });

            global.uploadCoordinator = {
                validationError: function(text) {
                    alert(text);

                    document.location.reload(true);
                },

                assumeServerUploadError: function() {
                    $uploadRoot.html($('#upload-error').html());
                },
                complete: function (targetUrl) {
                    clearTimeout(errorIntervalTimerHandle);

                    $uploadRoot.html($('#upload-done').html());

                    document.location.href = targetUrl;
                }
            };

            global.app.contactInformationPersistence.initialize(
               '@Html.IdFor(x => x.Sender.Name)',
               '@Html.IdFor(x => x.Sender.EmailAddress)'
            );
        })(window);
    </script>
}